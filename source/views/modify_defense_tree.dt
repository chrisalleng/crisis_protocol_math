- import modify_defense_tree;
- import dice;
- import simulation_state2;
- import std.format;

- string defense_dice(DiceState dice, int unknown_rerolls = 0)
    - import std.range;

    - string output = replicate("<i class=\"defense-die die-evade\"></i>", dice.results[DieResult.Evade]);
    - output       ~= replicate("<i class=\"defense-die die-focus\"></i>", dice.results[DieResult.Focus]);
    - output       ~= replicate("<i class=\"defense-die die-blank\"></i>", dice.results[DieResult.Blank]);

    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-unknown\"></i>", unknown_rerolls);

    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-evade\"></i>", dice.rerolled_results[DieResult.Evade] + dice.final_results[DieResult.Evade]);
    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-focus\"></i>", dice.rerolled_results[DieResult.Focus] + dice.final_results[DieResult.Focus]);
    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-blank\"></i>", dice.rerolled_results[DieResult.Blank] + dice.final_results[DieResult.Blank]);

    - return output;
    
- void output_token_spending(TokenState2 before, TokenState2 after, DefenseTempState2 before_temp, DefenseTempState2 after_temp)
    - int calculate_consumed = before.calculate - after.calculate;
    - int locks_consumed = before.lock - after.lock;

    - if (after_temp.used_c3p0 != before_temp.used_c3p0)
        | Before rolling, spend 1 calculate to use C-3P0 (guess 1)<br/>
        - --calculate_consumed;

    - if (after_temp.used_add_evade_count > before_temp.used_add_evade_count)
        - int count = after_temp.used_add_evade_count - before_temp.used_add_evade_count;
        | Add #{count} <i class="die die-evade"></i> #{count > 1 ? "results" : "result"}<br/>
    
    - if (locks_consumed > 0 && after_temp.used_shara_bey_pilot != before_temp.used_shara_bey_pilot)
        | Spend lock to add 1 <i class="die die-focus"></i> result using Shara Bey<br/>
        - --locks_consumed;

    - if (after.focus < before.focus)
        | Spend focus<br/>
    - if (calculate_consumed > 0)
        | Spend #{calculate_consumed} calculate<br/>
        - calculate_consumed = 0;
    - if (after.force < before.force)
        | Spend #{before.force - after.force} force<br/>
    - if (after.evade < before.evade)
        | Spend focus<br/>
    - if (after.iden != before.iden)
        | Use Iden Versio to cancel all dice

    - if (after_temp.used_any_to_evade_count > before_temp.used_any_to_evade_count)
        - int count = after_temp.used_any_to_evade_count - before_temp.used_any_to_evade_count;
        | Change #{count} #{count > 1 ? "results to " : "result to an"} <i class="die die-evade"></i> #{count > 1 ? "results " : "result"}<br/>

    - if (locks_consumed > 0)
        | Spend lock<br/>
        - --locks_consumed;
    - if (after.lone_wolf != before.lone_wolf)
        | Use lone wolf<br/>
            
.grid-x.grid-margin-x.small-up-1.medium-up-1.large-up-1
    .cell
        - foreach (index, ref const node; nodes)
            div(class='callout modify-node#{index > 0 ? " hide" : ""}', data-node-index="#{index}", data-node-depth="#{node.depth}")
                    
                h3 Expected Damage #{format("%.3f", node.expected_damage)}
                p !{defense_dice(node.before.defense_dice)} => !{defense_dice(node.after.defense_dice, node.reroll_count)}
                    
                p
                    - output_token_spending(node.before.defense_tokens, node.after.defense_tokens, node.before.defense_temp, node.after.defense_temp);
                    - if (node.reroll_count > 0)
                        | Reroll #{node.reroll_count} #{node.reroll_count > 1 ? "dice" : "die"} into:<br/>
                        p
                            - foreach (child_index; node.first_child_index .. (node.first_child_index + node.child_count))
                                button.button.secondary.modify-node-child-button(type="button", data-child-index="#{child_index}", data-child-depth="#{nodes[child_index].depth}")
                                    | !{defense_dice(nodes[child_index].before.defense_dice)} (#{format("%.1f", nodes[child_index].child_probability * 100.0)}%)
                        