- import modify_defense_tree;
- import dice;
- import simulation_state2;
- import std.format;

- string defense_dice(DiceState dice, int unknown_rerolls = 0)
    - import std.range;

    - string output = replicate("<i class=\"defense-die die-evade\"></i>", dice.results[DieResult.Evade]);
    - output       ~= replicate("<i class=\"defense-die die-focus\"></i>", dice.results[DieResult.Focus]);
    - output       ~= replicate("<i class=\"defense-die die-blank\"></i>", dice.results[DieResult.Blank]);

    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-unknown\"></i>", unknown_rerolls);

    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-evade\"></i>", dice.rerolled_results[DieResult.Evade] + dice.final_results[DieResult.Evade]);
    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-focus\"></i>", dice.rerolled_results[DieResult.Focus] + dice.final_results[DieResult.Focus]);
    - output       ~= replicate("<i class=\"defense-die defense-die-rerolled die-blank\"></i>", dice.rerolled_results[DieResult.Blank] + dice.final_results[DieResult.Blank]);

    - return output;
            
.grid-x.grid-margin-x.small-up-1.medium-up-1.large-up-1
    .cell
        - foreach (index, ref const node; nodes)
            div(class='callout modify-node#{index > 0 ? " hide" : ""}', data-node-index="#{index}", data-node-depth="#{node.depth}")
                    
                h3 Expected Damage #{format("%.3f", node.expected_damage)}
                p !{defense_dice(node.before.defense_dice)} => !{defense_dice(node.after.defense_dice, node.reroll_count)}
                    
                p
                    - output_token_spending(node.before.defense_tokens, node.after.defense_tokens, node.before.defense_temp, node.after.defense_temp);
                    - if (node.reroll_count > 0)
                        | Reroll #{node.reroll_count} #{node.reroll_count > 1 ? "dice" : "die"} into:<br/>
                        p
                            - foreach (child_index; node.first_child_index .. (node.first_child_index + node.child_count))
                                button.button.secondary.modify-node-child-button(type="button", data-child-index="#{child_index}", data-child-depth="#{nodes[child_index].depth}")
                                    | !{defense_dice(nodes[child_index].before.defense_dice)} (#{format("%.1f", nodes[child_index].child_probability * 100.0)}%)
                        