extends layout

block content    
    .row
        .large-12.columns
            form#simulate-advanced-form(action="#", method="GET")

                - void slider_control(string name, string label, int min, int max, int init)
                    .row
                        .large-6.medium-8.small-8.columns
                            .input-group
                                span.input-group-label #{label}
                                input.input-group-field(id="#{name}_output", name="#{name}", type="number")
                        .large-6.medium-4.small-4.columns
                            .slider(data-slider, data-initial-start="#{init}", data-start="#{min}", data-end="#{max}")
                                span.slider-handle(data-slider-handle, role="slider", tabindex="1", aria-controls="#{name}_output")
                                span.slider-fill(data-slider-fill)

                - void switch_control(string name, string label, string type="checkbox")
                    .row
                        .small-9.columns
                            label(for="#{name}") #{label}
                        .small-3.columns.text-right
                            .switch.small
                                input.switch-input(id="#{name}", name="#{name}", type="#{type}")
                                label.switch-paddle(for="#{name}")
                                    //- span.switch-active(aria-hidden="true") All
                                    //- span.switch-inactive(aria-hidden="true") #

                - void radio_switch_control(string name, string label, string value, bool checked = false)
                    .row
                        .large-9.medium-9.small-9.columns
                            label(for="#{value}") #{label}
                        .large-3.medium-3.small-3.columns.text-right
                            .switch.small
                                - if (checked)
                                    input.switch-input(id="#{value}", name="#{name}", value="#{value}", type="radio", checked)
                                - else
                                    input.switch-input(id="#{value}", name="#{name}", value="#{value}", type="radio")
                                label.switch-paddle(for="#{value}")

                - void stepper_control(string name, string label, int min, int max, int init)
                    .row
                        .small-6.columns
                            label(for="#{name}") #{label}
                        .small-6.columns.text-right
                            .input-group.stepper-group
                                .input-group-button
                                    button.button.stepper-button(type="button", data-delta="-1") -
                                input.stepper-number(id="#{name}", name="#{name}", type="number", value="#{init}", min="#{min}", max="#{max}")
                                .input-group-button
                                    button.button.stepper-button(type="button", data-delta="1") +

                .row
                    .medium-6.columns
                        .callout.small.alert
                            h3 Attack Dice and Tokens
                            - stepper_control("attack_dice",              "Attack Dice",  1, 8, 3);
                            - stepper_control("attack_focus_token_count", "Focus Tokens", 0, 2, 0);
                            - stepper_control("attack_target_lock_count", "Target Locks", 0, 2, 0);

                            fieldset.fieldset
                                legend Special Effects
                                - switch_control("attack_one_damage_on_hit",   "One Damage on Hit (TLT, Ion)");
                                - switch_control("attack_heavy_laser_cannon",  "Heavy Laser Cannon");
                                - switch_control("attack_fire_control_system", "Fire Control System");
                        
                        .callout.small.success
                            h3 Defender Modify Attack Dice
                            fieldset.fieldset
                                legend Change Results
                                - stepper_control("dmad_hit_to_focus_no_reroll_count",  "Hit to Focus (No Reroll)",  0, 20, 0);

                        .callout.small.alert
                            h3 Attacker Modify Attack Dice
                            fieldset.fieldset
                                legend Add Results
                                - stepper_control("amad_add_blank_count", "Blank", 0, 2, 0);
                                - stepper_control("amad_add_focus_count", "Focus", 0, 2, 0);
                                - stepper_control("amad_add_hit_count",   "Hit",   0, 2, 0);
                                - stepper_control("amad_add_crit_count",  "Crit",  0, 2, 0);
                            fieldset.fieldset
                                legend Free Rerolls
                                - stepper_control("amad_reroll_blank_count", "Blank", 0, 20, 0);
                                - stepper_control("amad_reroll_focus_count", "Focus", 0, 20, 0);
                                - stepper_control("amad_reroll_any_count",   "Any",   0, 20, 0);
                            fieldset.fieldset
                                legend Change Results
                                - stepper_control("amad_blank_to_hit_count",  "Blank to Hit",  0, 20, 0);
                                - stepper_control("amad_blank_to_crit_count", "Blank to Crit", 0, 20, 0);
                                - stepper_control("amad_focus_to_hit_count",  "Focus to Hit",  0, 20, 0);
                                - stepper_control("amad_focus_to_crit_count", "Focus to Crit", 0, 20, 0);
                                - stepper_control("amad_hit_to_crit_count",   "Hit to Crit",   0, 20, 0);
                                - switch_control("amad_accuracy_corrector",  "Accuracy Corrector");
                            fieldset.fieldset
                                legend Change Results Once
                                - switch_control("amad_once_any_to_hit",  "Any to Hit");
                                - switch_control("amad_once_any_to_crit", "Any to Crit");

                    .medium-6.columns
                        .callout.small.success
                            h3 Defense Dice and Tokens
                            - stepper_control("defense_dice",              "Defense Dice", 0, 6, 3);
                            - stepper_control("defense_focus_token_count", "Focus Tokens", 0, 2, 0);
                            - stepper_control("defense_evade_token_count", "Evade Tokens", 0, 2, 0);

                        .callout.small.alert
                            h3 Attacker Modify Defense Dice
                            fieldset.fieldset
                                legend Change Results
                                - stepper_control("amdd_evade_to_focus_count", "Evade to Focus",  0, 20, 0);

                        .callout.small.success
                            h3 Defender Modify Defense Dice
                            fieldset.fieldset
                                legend Add Results
                                - stepper_control("dmdd_add_blank_count", "Blank", 0, 2, 0);
                                - stepper_control("dmdd_add_focus_count", "Focus", 0, 2, 0);
                                - stepper_control("dmdd_add_evade_count", "Evade", 0, 2, 0);
                            fieldset.fieldset
                                legend Free Rerolls
                                - stepper_control("dmdd_reroll_blank_count", "Blank", 0, 20, 0);
                                - stepper_control("dmdd_reroll_focus_count", "Focus", 0, 20, 0);
                                - stepper_control("dmdd_reroll_any_count",   "Any",   0, 20, 0);
                            fieldset.fieldset
                                legend Change Results
                                - stepper_control("dmdd_blank_to_evade_count", "Blank to Evade",  0, 20, 0);
                                - stepper_control("dmdd_focus_to_evade_count", "Focus to Evade",  0, 20, 0);

                        

                            
                        .callout.small.primary
                            - radio_switch_control("attack_type", "Single Attack",             "single", true);
                            - radio_switch_control("attack_type", "Secondary Perform Twice",   "secondary_perform_twice");
                            - radio_switch_control("attack_type", "After Attack Does Not Hit", "after_attack_does_not_hit");
                            - radio_switch_control("attack_type", "After Attack",              "after_attack");
                            .row.text-center
                                button#simulate.button.large.simulate-button Simulate
            
            .row
                .medium-6.columns
                    canvas#pdf-canvas(height="300")
                .medium-6.columns
                    canvas#token-canvas(height="300")
