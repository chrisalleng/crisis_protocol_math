extends layout

block content    
    .row
        .large-12.columns
            h1 X-Wing Math Simulator

            form#simulate-form(action="#", method="GET")

                - void slider_control(string name, string label, int min, int max, int init)
                    .large-6.medium-9.small-8.columns
                        .input-group
                            span.input-group-label #{label}
                            input.input-group-field(id="#{name}_output", name="#{name}", type="number")
                    .large-6.medium-3.small-4.columns
                        .slider(data-slider, data-initial-start="#{init}", data-start="#{min}", data-end="#{max}")
                            span.slider-handle(data-slider-handle, role="slider", tabindex="1", aria-controls="#{name}_output")
                            span(data-slider-fill)

                - void switch_control(string name, string label, string type="checkbox")
                    .large-6.medium-9.small-8.columns
                        label(for="#{name}") #{label}
                    .large-6.medium-3.small-4.columns
                        .switch.small
                            input.switch-input(id="#{name}", name="#{name}", type="#{type}")
                            label.switch-paddle(for="#{name}")

                - void radio_switch_control(string name, string label, string value, bool checked = false)
                    .large-6.medium-9.small-8.columns
                        label(for="#{value}") #{label}
                    .large-6.medium-3.small-4.columns
                        .switch.small
                            - if (checked)
                                input.switch-input(id="#{value}", name="#{name}", value="#{value}", type="radio", checked)
                            - else
                                input.switch-input(id="#{value}", name="#{name}", value="#{value}", type="radio")
                            label.switch-paddle(for="#{value}")

                .row
                    .medium-6.columns
                        .callout.alert
                            .row
                                - slider_control("attack_dice",                "Attack Dice",        1, 6, 3);
                                - slider_control("attack_focus_token_count",   "Focus Tokens",       0, 2, 0);
                                - slider_control("attack_target_lock_count",   "Target Locks",       0, 2, 0);
                                - switch_control("attack_accuracy_corrector",  "Accuracy Corrector");
                                - switch_control("attack_fire_control_system", "Fire Control System");
                                - switch_control("attack_heavy_laser_cannon",  "Heavy Laser Cannon");
                                - switch_control("attack_juke",                "Juke");
                                - switch_control("attack_mangler_cannon",      "Mangler Cannon");
                                - switch_control("attack_marksmanship",        "Marksmanship");
                                - switch_control("attack_mercenary_copilot",   "Mercenary Copilot");
                                - switch_control("attack_one_damage_on_hit",   "One Damage on Hit (TLT, Ion)");
                                - switch_control("attack_predator_1",          "Predator (1 reroll)");
                                - switch_control("attack_predator_2",          "Predator (2 rerolls)");
                                - switch_control("attack_rage",                "Rage (3 rerolls)");

                    .medium-6.columns
                        .callout.success
                            .row
                                - slider_control("defense_dice",              "Defense Dice", 0, 6, 3);
                                - slider_control("defense_focus_token_count", "Focus Tokens", 0, 2, 0);
                                - slider_control("defense_evade_token_count", "Evade Tokens", 0, 2, 0);
                                - switch_control("defense_autothrusters",     "Autothrusters");
                                                    
                        .callout.primary
                            - radio_switch_control("attack_type", "Single Attack",             "single", true);
                            - radio_switch_control("attack_type", "Secondary Perform Twice",   "secondary_perform_twice");
                            - radio_switch_control("attack_type", "After Attack Does Not Hit", "after_attack_does_not_hit");
                            - radio_switch_control("attack_type", "After Attack",              "after_attack");
                            button#simulate.button Simulate

            div
                canvas#pdf-canvas
    
    

    script.
        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(231,233,237)'
        };
        var chart_data = {
            labels: ["0", "1", "2", "3", "4", "5", "6"],
            datasets: [{
                type: 'line',
                label: 'P(Hits>=x)',
                borderColor: window.chartColors.blue,
                backgroundColor: window.chartColors.blue,
                borderWidth: 2,
                fill: false,
                data: []
            }, {
                type: 'bar',
                label: 'Hits',
                backgroundColor: window.chartColors.red,
                data: []
            }, {
                type: 'bar',
                label: 'Crits',
                backgroundColor: window.chartColors.orange,
                data: [] 
            }]
        };

        window.onload = function()
        {
            var ctx = document.getElementById("pdf-canvas").getContext("2d");
            window.pdf_chart = new Chart(ctx, {
                type: 'bar',
                data: chart_data,
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: 'Total Hit Probability Distribution',
                        fontSize: 24,
                    },
                    legend: {
                        onClick: (e) => e.stopPropagation()
                    },
                    tooltips: {
                        mode: 'index',
                        intersect: true,
                        callbacks: {
                            title: function(tooltipItems, data) {
                                var sum = 0;
                                tooltipItems.forEach(function(tooltipItem) {
                                    if (tooltipItem.datasetIndex > 0)
                                        sum += data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                                });
                                return sum.toFixed(1) + '%';
                            },
                            label: function(tooltipItem, data) {
                                return data.datasets[tooltipItem.datasetIndex].label + ': ' + tooltipItem.yLabel.toFixed(1) + '%';
                            },
                        },
                    },
                    scales: {
                        xAxes: [{
                            stacked: true,
                        }],
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: 100,
                            },
                            stacked: true
                        }]
                    }
                }
            });
        };

        function simulateUpdateChart(data)
         {
            chart_data.datasets[0].data = data.hit_inv_cdf;
            chart_data.datasets[1].data = data.hit_pdf;
            chart_data.datasets[2].data = data.crit_pdf;
            window.pdf_chart.options.title.text = "Expected Total Hits: " + data.expected_total_hits.toFixed(2);
            window.pdf_chart.update();
        }

        $(document).ready(function()
         {
            $('#simulate').click(function(event) {
                event.preventDefault();
                var data = $("#simulate-form").serializeArray();
                $.getJSON('simulate.json', data, simulateUpdateChart);
            });

            // Predator selectors are mutually exclusive
            $('#attack_predator_1').change(function() {
                if (this.checked)
                    $('#attack_predator_2').prop("checked", false);
            });
            $('#attack_predator_2').change(function() {
                if (this.checked)
                    $('#attack_predator_1').prop("checked", false);
            });

        });
